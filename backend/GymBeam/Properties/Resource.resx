<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ControllerBadRequest" xml:space="preserve">
    <value>Bad Request: {0}</value>
  </data>
  <data name="ControllerForbidden" xml:space="preserve">
    <value>Forbidden: {0}</value>
  </data>
  <data name="ControllerInternalError" xml:space="preserve">
    <value>Internal Server Error: {0}</value>
  </data>
  <data name="ControllerMethodNotAllowed" xml:space="preserve">
    <value>Method Not Allowed: {0}</value>
  </data>
  <data name="ControllerNotFound" xml:space="preserve">
    <value>Not Found: {0}</value>
  </data>
  <data name="ExceptionCookieIsInvalid" xml:space="preserve">
    <value>Cookie {0} was not found.</value>
  </data>
  <data name="ExceptionSigningKeyIsMissing" xml:space="preserve">
    <value>JWT signing key is missing.</value>
  </data>
  <data name="ExceptionUserIdIsInvalid" xml:space="preserve">
    <value>User id is invalid.</value>
  </data>
  <data name="ExceptionUserNotAllowed" xml:space="preserve">
    <value>User is not allowed to perform this operation.</value>
  </data>
  <data name="ExceptionUserRoleNotFound" xml:space="preserve">
    <value>Failed to read user role.</value>
  </data>
  <data name="ValidatorActivityIdRequired" xml:space="preserve">
    <value>ActivityId is required.</value>
  </data>
  <data name="ValidatorCronRequired" xml:space="preserve">
    <value>Cron field is required.</value>
  </data>
  <data name="ValidatorCronShorter" xml:space="preserve">
    <value>Cron must not exceed 255 characters.</value>
  </data>
  <data name="ValidatorDisplayNameLonger" xml:space="preserve">
    <value>Display name must be at least 5 characters long.</value>
  </data>
  <data name="ValidatorDisplayNameRequired" xml:space="preserve">
    <value>Display name is required.</value>
  </data>
  <data name="ValidatorDisplayNameShorter" xml:space="preserve">
    <value>Display name must not exceed 20 characters.</value>
  </data>
  <data name="ValidatorDurationGreaterThanZero" xml:space="preserve">
    <value>Duration must be greater than zero.</value>
  </data>
  <data name="ValidatorEndTimeAfterStartTime" xml:space="preserve">
    <value>End time must be after start time.</value>
  </data>
  <data name="ValidatorEnrollmentRangeExceeded" xml:space="preserve">
    <value>Enrollments range must be less then 7 days.</value>
  </data>
  <data name="ValidatorLongDescriptionShorter" xml:space="preserve">
    <value>Long description must not exceed 4000 characters.</value>
  </data>
  <data name="ValidatorNameRequired" xml:space="preserve">
    <value>Name field is required.</value>
  </data>
  <data name="ValidatorNameShorter" xml:space="preserve">
    <value>Name must not exceed 255 characters.</value>
  </data>
  <data name="ValidatorPasswordLonger" xml:space="preserve">
    <value>Password must be at least 5 characters long.</value>
  </data>
  <data name="ValidatorPasswordRequired" xml:space="preserve">
    <value>Password is required.</value>
  </data>
  <data name="ValidatorPasswordShorter" xml:space="preserve">
    <value>Password must not exceed 255 characters.</value>
  </data>
  <data name="ValidatorRoleFromRolesList" xml:space="preserve">
    <value>Role must be one of: {0}</value>
  </data>
  <data name="ValidatorShortDescriptionShorter" xml:space="preserve">
    <value>Short description must not exceed 1000 characters.</value>
  </data>
  <data name="ValidatorStartTimeBeforeEndTime" xml:space="preserve">
    <value>Start time must be before end time.</value>
  </data>
  <data name="ValidatorStartTimeRequired" xml:space="preserve">
    <value>Start time is required.</value>
  </data>
  <data name="ValidatorTotalCapacityGreaterThanZero" xml:space="preserve">
    <value>Total capacity must be greater than zero.</value>
  </data>
  <data name="ValidatorUserIdRequired" xml:space="preserve">
    <value>User id is required.</value>
  </data>
  <data name="ValidatorUsernameLonger" xml:space="preserve">
    <value>Username must be at least 5 characters long.</value>
  </data>
  <data name="ValidatorUsernameRequired" xml:space="preserve">
    <value>Username is required.</value>
  </data>
  <data name="ValidatorUsernameShorter" xml:space="preserve">
    <value>Username must not exceed 20 characters.</value>
  </data>
</root>